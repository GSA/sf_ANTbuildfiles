<project name="Sample usage of Salesforce Ant tasks" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>
    <property environment="env"/>

    <!-- Setting default value for username, password and session id properties to empty string 
         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
         will be treated literally..
    -->
    <condition property="sf.username" value=""> <not> <isset property="sf.username"/> </not> </condition>
    <condition property="sf.password" value=""> <not> <isset property="sf.password"/> </not> </condition>
    <condition property="sf.sessionId" value=""> <not> <isset property="sf.sessionId"/> </not> </condition>
    <record name="deploymentLog.log" loglevel="info" append="yes"/>
	<echo>Running against:
	    ${sf.environment}
	    ${sf.serverurl}
	    ${sf.username}
	</echo>
	
    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="../ant-salesforce.jar" />        	
        </classpath>
    </taskdef>
	
	
	
 	<!-- Running "ant deploy" would perform all the action as mentioned-->
    <target name="deploy">
   		<echo>Starting the Deployment Process with Static Backup</echo>
        	<antcall target="retrieveUnpackaged" />
		<echo>Retrieving backup using the static/package.xml</echo>
	        <antcall target="retrieveUnpackagedStatic" />
	  	<echo>Performing code verification to the target sandbox</echo>
			<antcall target="deployCodeVerify" />
	  	<echo>Performing code Deployment to the target sandbox</echo>	
			<antcall target="deployCode" />
    </target>	

	<!-- Running "antdeploy_nostatic" would perform all the action (minus "static" backup)-->
    <target name="deploy_nostatic">
   		<echo>Starting the Deployment Process Without Static Backup</echo>
        	<antcall target="retrieveUnpackaged" />
		<echo>Performing code verification to the target sandbox</echo>
			<antcall target="deployCodeVerify" />
	  	<echo>Performing code Deployment to the target sandbox</echo>	
			<antcall target="deployCode" />	
    </target>

<!-- RunAllTestsInOrg, RunSpecifiedTests, RunLocalTests -->

 <!-- Shows deploying code & running tests for code in directory -->
    <target name="deployCodeVerify">
    
      <sf:deploy username="${sf.username}"
			password="${sf.password}"
 			sessionId="${sf.sessionId}"
 			serverurl="${sf.serverurl}"
 			maxPoll="${sf.maxPoll}"
			pollWaitMillis="${sf.pollWaitMillis}"			
			deployRoot="${sf.deployRoot}" 
			rollbackOnError="true"
 			checkOnly="true"			
			testLevel="RunSpecifiedTests">
      	<runTest>SampleDeployCode</runTest>
      </sf:deploy>
    </target>	
	
	  <!-- Shows deploying code & running tests for code in directory -->
    <target name="deployCode">
      <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->
     <sf:deploy username="${sf.username}"
			password="${sf.password}"
 			sessionId="${sf.sessionId}"
 			serverurl="${sf.serverurl}"
 			maxPoll="${sf.maxPoll}"
			pollWaitMillis="${sf.pollWaitMillis}"
			deployRoot="${sf.deployRoot}"			
 			rollbackOnError="true"
 			checkOnly="false"			
			testLevel="RunSpecifiedTests">
     	<runTest>SampleDeployCode</runTest>
      </sf:deploy>
    </target>
	
<!-- Retrieve using name of changeset and convert it to pacakge -->
	<target name="retrieveChangeSet">
	    <mkdir dir="changeSet" />
      <sf:retrieve username="${sf.username}"
			   password="${sf.password}"
			   sessionId="${sf.sessionId}" 
			   serverurl="${sf.serverurl}"
			   maxPoll="${sf.maxPoll}"
			   pollWaitMillis="${sf.pollWaitMillis}"
			   retrieveTarget="changeSet"
      packageNames="${sf.pkgName}" />
    </target> 

<!-- Retrieve an unpackaged set of metadata from your org -->
    <!-- The file unpackaged/package.xml lists what is to be retrieved -->
    <target name="retrieveUnpackaged">
      <mkdir dir="retrieveUnpackaged"/>
      <!-- Retrieve the contents into another directory -->
      <sf:retrieve username="${sf.username}"
			  password="${sf.password}"
			  sessionId="${sf.sessionId}"
			  serverurl="${sf.serverurl}"
			  maxPoll="${sf.maxPoll}"
			  pollWaitMillis="${sf.pollWaitMillis}"
			  retrieveTarget="retrieveUnpackaged"
			  unpackaged="src/package.xml"/>
    </target>
	
<!-- Retrieve an unpackaged set of metadata from your org -->
    <!-- The file unpackaged/package.xml lists what is to be retrieved -->
    	<target name="retrieveUnpackagedStatic">
      <mkdir dir="retrieveUnpackagedstatic"/>
      <!-- Retrieve the contents into another directory -->
      <sf:retrieve 	  username="${sf.username}"
			  password="${sf.password}"
			  sessionId="${sf.sessionId}"
			  serverurl="${sf.serverurl}"
			  maxPoll="${sf.maxPoll}"
			  pollWaitMillis="${sf.pollWaitMillis}"
			  retrieveTarget="retrieveUnpackagedStatic"
			  unpackaged="static/package.xml"/>
    	</target>	
	

	
	<!-- quick deployment of recent validation. Set property sf.requestId to Id of pending or in progress deploy request -->
	<target name="cancelDeploy">
	  <sf:cancelDeploy  
				username="${sf.username}" 
				password="${sf.password}"
				sessionId="${sf.sessionId}" 
				serverurl="${sf.serverurl}"
				maxPoll="${sf.maxPoll}"
				pollWaitMillis="${sf.pollWaitMillis}"
				requestId="${sf.requestId}"/>
	</target>	
	
	<!-- Shows removing code; only succeeds if done after deployCode -->
    	<target name="undeployCode">
      	<sf:deploy 		username="${sf.username}" 
				password="${sf.password}" 
		 		sessionId="${sf.sessionId}" 
		 		serverurl="${sf.serverurl}" 
		 		maxPoll="${sf.maxPoll}" 
		 		deployRoot="removecodepkg"/>
    	</target>
</project>

